//
//  MessagesViewController.swift
//  NowPlayingMessageExtension
//
//  Created by Thomas Greenwood on 9/6/18.
//  Copyright Â© 2018 Thomas Greenwood. All rights reserved.
//

import UIKit
import Messages
import MediaPlayer

class MessagesViewController: MSMessagesAppViewController {
	
	var artistStr: String?
	var titleStr: String?
	var albumStr: String?
	var artworkImg: UIImage?
	
	@IBOutlet var shareButton: UIButton!
	
	override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
		
    }
	
	func updateNowPlaying() {
		let systemMusicPlayer = MPMusicPlayerController.systemMusicPlayer.nowPlayingItem
		
		if let artist = systemMusicPlayer?.artist {
			artistStr = artist
		}
		
		if let album = systemMusicPlayer?.albumTitle {
			albumStr = album
		}
		
		if let title = systemMusicPlayer?.title {
			titleStr = title
		}
		
		if let artwork = systemMusicPlayer?.artwork {
			artworkImg = artwork.image(at: artwork.bounds.size)
		} else {
			// do something when there's no artwork - currently the artwork doesn't update
		}
		
	}
	
	@IBAction func shareButtonPressed(_ sender: Any) {
		updateNowPlaying()
		composeMessage()
	}
	
	private func composeMessage() {
		let conversation = activeConversation
		let session = conversation?.selectedMessage?.session ?? MSSession()
		
		let layout = MSMessageTemplateLayout()
		
		if let artwork = artworkImg {
			layout.image = artwork
		}
		
		layout.imageTitle = "Now Playing!"
		
		if let title = titleStr {
			layout.caption = title
		}

		if let artist = artistStr {
			layout.subcaption = artist
		}
		
		let message = MSMessage(session: session)
		message.layout = layout
		message.summaryText = "Shared Now Playing"
		
		conversation?.insert(message)
	}
	
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
